# automatically generated by the FlatBuffers compiler, do not modify

# namespace: metrics

import flatbuffers

class MetricSearchResult(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsMetricSearchResult(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MetricSearchResult()
        x.Init(buf, n + offset)
        return x

    # MetricSearchResult
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MetricSearchResult
    def Leaf(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # MetricSearchResult
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return bytes()

    # MetricSearchResult
    def LeafData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .LeafData import LeafData
            obj = LeafData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def MetricSearchResultStart(builder): builder.StartObject(3)
def MetricSearchResultAddLeaf(builder, leaf): builder.PrependInt8Slot(0, leaf, 0)
def MetricSearchResultAddName(builder, name): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def MetricSearchResultAddLeafData(builder, leafData): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(leafData), 0)
def MetricSearchResultEnd(builder): return builder.EndObject()
