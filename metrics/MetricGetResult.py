# automatically generated by the FlatBuffers compiler, do not modify

# namespace: metrics

import flatbuffers

class MetricGetResult(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsMetricGetResult(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MetricGetResult()
        x.Init(buf, n + offset)
        return x

    # MetricGetResult
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MetricGetResult
    def FromTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # MetricGetResult
    def ToTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # MetricGetResult
    def Step(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # MetricGetResult
    def Series(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .MetricGetSeriesData import MetricGetSeriesData
            obj = MetricGetSeriesData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MetricGetResult
    def SeriesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def MetricGetResultStart(builder): builder.StartObject(4)
def MetricGetResultAddFromTime(builder, fromTime): builder.PrependUint64Slot(0, fromTime, 0)
def MetricGetResultAddToTime(builder, toTime): builder.PrependUint64Slot(1, toTime, 0)
def MetricGetResultAddStep(builder, step): builder.PrependUint64Slot(2, step, 0)
def MetricGetResultAddSeries(builder, series): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(series), 0)
def MetricGetResultStartSeriesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def MetricGetResultEnd(builder): return builder.EndObject()
